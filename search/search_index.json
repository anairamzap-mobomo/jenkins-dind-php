{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MBN CI/CD Access We are now using github login. So you should be able to see jobs/tasks in Jenkins using your gitHub username. If you need admin access let Edu or Mariana know so we can add you to the Admin List. We are Using Jenkins in order to automate the following tasks: PR Builds (using the Jenkinsfile.testing pipeline). This happens on the Jenkins Master agent. Everytime we open a new PR, that PR code would be checked ( make code-test ) and built. develop branch build (using the Jenkinsfile.testing pipeline). This happens on the Jenkins Master agent. Everytime that a PR is merged into develop branch, Jenkins will build that branch. Acquia Dev env deployments. This happens on the SSH Agent Daily node. Jenkins will build develop Create a tag Deploy that tag checkout the tag for Dev env. So this will cover all the deployment tasks we were manually doing. We haven t defined a time yet, but we think it could run everyday at 7am. So we will always have a fresh Dev env. Nice to have tasks Jenkins can be easily integrated with Jira, so a nice thing would be to configure the Jira integration in a way that makes sense for us. Jenkins is already integrated with github, so we could make use of that to properly label PRs For example: We could start using releases on Jira so Jenkins can properly tag all the tickets included in a deployment, with the release tag. We could use github integration to properly label PRs once they get merged (not sure if doable actually, but would be great :P ) Server Details https://jenkins.mobomo.net Algo m\u00e1s? Stumped into some odd bugs in the road git Acquia repo requires git username/email 1 2 3 4 5 6 7 8 9 10 11 12 13 *** Please tell me who you are. Run git config --global user.email you@example.com git config --global user.name Your Name to set your account s default identity. Omit --global to set the identity only in this repository. fatal: empty ident name ( for ( null ) ) not allowed [ ExecStack ] Exit code 128 [ error ] Could not initialize new git repository. Apparently the ve fixed this in blt version 10.x: https://github.com/acquia/blt/pull/3541 As a workaround (since updating the blt version could very likely cause other issues I wanted to avoid) I ve added a git config user.name and user.email in the agent Dockerfile git acquia repo key not found/trusted In order to workaround this issue I had to run the blt artifact:deploy command manually from the jenkins agent repo and accept the connection: 1 2 3 4 The authenticity of host svn-2398.enterprise-g1.hosting.acquia.com (54.208.34.237) can t be established. RSA key fingerprint is SHA256:bV2a1i24wN1fKHPklmexouKYRnnp/TZtzV24Wd+fpoQ. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added svn-2398.enterprise-g1.hosting.acquia.com,54.208.34.237 ( RSA ) to the list of known hosts. Thanks so much Acquia! To fix this I ve added the dev server host to the /home/jenkins/.ssh/known_hosts On composer install run by the vendor/bin/blt artifact:deploy command (which is using robo) 1 2 3 4 Generating optimized autoload files In AutoloadGenerator.php line 1054 : fopen ( /usr/share/php/Composer/Autoload/../../../doc/composer/copyright ) : failed to open stream: No such file or directory","title":"Intro"},{"location":"index.html#mbn-cicd","text":"Access We are now using github login. So you should be able to see jobs/tasks in Jenkins using your gitHub username. If you need admin access let Edu or Mariana know so we can add you to the Admin List. We are Using Jenkins in order to automate the following tasks: PR Builds (using the Jenkinsfile.testing pipeline). This happens on the Jenkins Master agent. Everytime we open a new PR, that PR code would be checked ( make code-test ) and built. develop branch build (using the Jenkinsfile.testing pipeline). This happens on the Jenkins Master agent. Everytime that a PR is merged into develop branch, Jenkins will build that branch. Acquia Dev env deployments. This happens on the SSH Agent Daily node. Jenkins will build develop Create a tag Deploy that tag checkout the tag for Dev env. So this will cover all the deployment tasks we were manually doing. We haven t defined a time yet, but we think it could run everyday at 7am. So we will always have a fresh Dev env.","title":"MBN CI/CD"},{"location":"index.html#nice-to-have-tasks","text":"Jenkins can be easily integrated with Jira, so a nice thing would be to configure the Jira integration in a way that makes sense for us. Jenkins is already integrated with github, so we could make use of that to properly label PRs For example: We could start using releases on Jira so Jenkins can properly tag all the tickets included in a deployment, with the release tag. We could use github integration to properly label PRs once they get merged (not sure if doable actually, but would be great :P )","title":"Nice to have tasks"},{"location":"index.html#server-details","text":"https://jenkins.mobomo.net Algo m\u00e1s?","title":"Server Details"},{"location":"index.html#stumped-into-some-odd-bugs-in-the-road","text":"git Acquia repo requires git username/email 1 2 3 4 5 6 7 8 9 10 11 12 13 *** Please tell me who you are. Run git config --global user.email you@example.com git config --global user.name Your Name to set your account s default identity. Omit --global to set the identity only in this repository. fatal: empty ident name ( for ( null ) ) not allowed [ ExecStack ] Exit code 128 [ error ] Could not initialize new git repository. Apparently the ve fixed this in blt version 10.x: https://github.com/acquia/blt/pull/3541 As a workaround (since updating the blt version could very likely cause other issues I wanted to avoid) I ve added a git config user.name and user.email in the agent Dockerfile git acquia repo key not found/trusted In order to workaround this issue I had to run the blt artifact:deploy command manually from the jenkins agent repo and accept the connection: 1 2 3 4 The authenticity of host svn-2398.enterprise-g1.hosting.acquia.com (54.208.34.237) can t be established. RSA key fingerprint is SHA256:bV2a1i24wN1fKHPklmexouKYRnnp/TZtzV24Wd+fpoQ. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added svn-2398.enterprise-g1.hosting.acquia.com,54.208.34.237 ( RSA ) to the list of known hosts. Thanks so much Acquia! To fix this I ve added the dev server host to the /home/jenkins/.ssh/known_hosts On composer install run by the vendor/bin/blt artifact:deploy command (which is using robo) 1 2 3 4 Generating optimized autoload files In AutoloadGenerator.php line 1054 : fopen ( /usr/share/php/Composer/Autoload/../../../doc/composer/copyright ) : failed to open stream: No such file or directory","title":"Stumped into some odd bugs in the road"},{"location":"docker_containers.html","text":"Dockerize all the things As we encountered some issues trying to use the server local proxy setup, and packages for Docker and Jenkins (tomcat server ) we ve decided to run containers for all the required services: Docker Daemon (docker:dind) Nginx (for the reverse proxy, TLS/https) Jenkins (jenkins-blueocean) Jenkins SSH Agent based on https://hub.docker.com/r/jenkins/ssh-agent (to make deployments in a different -ie not master - Jenkins Node) Portainer (Web UI to manage containers) We have packaged all those in a lovely docker-compose yml file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 version : 3.8 services : # Docker daemon. DNS name docker docker : container_name : jenkins-docker image : docker:dind privileged : true networks : jenkins : aliases : - docker environment : - DOCKER_TLS_CERTDIR=/certs volumes : - jenkins-docker-certs:/certs/client - jenkins-data:/var/jenkins_home ports : - 2376:2376 # Nginx with reverse proxy for SSL/https. jenkins-nginx : depends_on : - docker container_name : jenkins-nginx image : jwilder/nginx-proxy hostname : jenkins-nginx privileged : true networks : - jenkins environment : - DOCKER_CERT_PATH=/etc/nginx/certs - DOCKER_TLS_VERIFY=1 - DHPARAM_GENERATION=0 ports : - 8880:80 - 1443:443 volumes : - /var/run/docker.sock:/tmp/docker.sock:ro - jenkins-docker-certs:/etc/nginx/certs # Jenkins blueocean. jenkins : depends_on : - docker - jenkins-nginx container_name : jenkins-blueocean image : jenkinsci/blueocean networks : - jenkins environment : - DOCKER_HOST=tcp://docker:2376 - DOCKER_CERT_PATH=/certs/client - DOCKER_TLS_VERIFY=1 volumes : - jenkins-data:/var/jenkins_home - jenkins-docker-certs:/certs/client:ro - agent-home:/home/jenkins ports : - 8080:8080 - 50000:50000 # Portainer web UI. portainer : depends_on : - docker image : portainer/portainer restart : always environment : - DOCKER_TLS_VERIFY=1 - DOCKER_CERT_PATH=/certs/client networks : - jenkins volumes : - /var/run/docker.sock:/var/run/docker.sock - portainer_data:/data - jenkins-docker-certs:/certs/client:ro ports : - 9000:9000 # Jenkins ssh agent to build and execute Acquia deployments :) ssh-agent : domainname : ssh-agent hostname : jenkins container_name : jenkins-ssh_agent depends_on : - jenkins build : context : . dockerfile : ./Dockerfile image : anairamzap/jenkins-dind-php:latest environment : - JENKINS_SLAVE_SSH_PUBKEY=${JENKINS_SLAVE_SSH_PUBKEY} - JAVA_HOME=/usr/lib/jvm/openjdk/ - DOCKER_HOST=tcp://docker:2376 - DOCKER_CERT_PATH=/certs/client - DOCKER_TLS_VERIFY=1 networks : jenkins : aliases : - jenkins.ssh-agent volumes : - jenkins-docker-certs:/certs/client:ro - jenkins-data:/var/jenkins_home - agent-home:/home/jenkins networks : jenkins : driver : bridge volumes : jenkins-data : jenkins-docker-certs : portainer_data : agent-home : If you change something in the Dockerfile(s) for the jenkins ssh agent or for the jenkins-blueocean, remember to re-build that image: 1 docker-compose up -d --build --no-cache To run the docker-compose stack: 1 docker-compose -f docker-compose.yml up -d In order to run this we should check that we ve added: ssh private key added to Jenkins Credentials You can get it on jenkins-blueocean container /var/jenkins_home/.ssh/id_rsa please be careful and do not share it in plain emails/messages :) Above credentials to be used on both the ACSF Daily Agent and on the Freestyle Project Where is this coming from? On the QA server we ve cloned the image repo (which is providing the docker-compose, Dockerfiles, and entrypoints) on Bitnami home: 1 /home/bitnami/jenkins_mbn/jenkins-dind-php","title":"Dockerize all the things!"},{"location":"docker_containers.html#dockerize-all-the-things","text":"As we encountered some issues trying to use the server local proxy setup, and packages for Docker and Jenkins (tomcat server ) we ve decided to run containers for all the required services: Docker Daemon (docker:dind) Nginx (for the reverse proxy, TLS/https) Jenkins (jenkins-blueocean) Jenkins SSH Agent based on https://hub.docker.com/r/jenkins/ssh-agent (to make deployments in a different -ie not master - Jenkins Node) Portainer (Web UI to manage containers) We have packaged all those in a lovely docker-compose yml file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 version : 3.8 services : # Docker daemon. DNS name docker docker : container_name : jenkins-docker image : docker:dind privileged : true networks : jenkins : aliases : - docker environment : - DOCKER_TLS_CERTDIR=/certs volumes : - jenkins-docker-certs:/certs/client - jenkins-data:/var/jenkins_home ports : - 2376:2376 # Nginx with reverse proxy for SSL/https. jenkins-nginx : depends_on : - docker container_name : jenkins-nginx image : jwilder/nginx-proxy hostname : jenkins-nginx privileged : true networks : - jenkins environment : - DOCKER_CERT_PATH=/etc/nginx/certs - DOCKER_TLS_VERIFY=1 - DHPARAM_GENERATION=0 ports : - 8880:80 - 1443:443 volumes : - /var/run/docker.sock:/tmp/docker.sock:ro - jenkins-docker-certs:/etc/nginx/certs # Jenkins blueocean. jenkins : depends_on : - docker - jenkins-nginx container_name : jenkins-blueocean image : jenkinsci/blueocean networks : - jenkins environment : - DOCKER_HOST=tcp://docker:2376 - DOCKER_CERT_PATH=/certs/client - DOCKER_TLS_VERIFY=1 volumes : - jenkins-data:/var/jenkins_home - jenkins-docker-certs:/certs/client:ro - agent-home:/home/jenkins ports : - 8080:8080 - 50000:50000 # Portainer web UI. portainer : depends_on : - docker image : portainer/portainer restart : always environment : - DOCKER_TLS_VERIFY=1 - DOCKER_CERT_PATH=/certs/client networks : - jenkins volumes : - /var/run/docker.sock:/var/run/docker.sock - portainer_data:/data - jenkins-docker-certs:/certs/client:ro ports : - 9000:9000 # Jenkins ssh agent to build and execute Acquia deployments :) ssh-agent : domainname : ssh-agent hostname : jenkins container_name : jenkins-ssh_agent depends_on : - jenkins build : context : . dockerfile : ./Dockerfile image : anairamzap/jenkins-dind-php:latest environment : - JENKINS_SLAVE_SSH_PUBKEY=${JENKINS_SLAVE_SSH_PUBKEY} - JAVA_HOME=/usr/lib/jvm/openjdk/ - DOCKER_HOST=tcp://docker:2376 - DOCKER_CERT_PATH=/certs/client - DOCKER_TLS_VERIFY=1 networks : jenkins : aliases : - jenkins.ssh-agent volumes : - jenkins-docker-certs:/certs/client:ro - jenkins-data:/var/jenkins_home - agent-home:/home/jenkins networks : jenkins : driver : bridge volumes : jenkins-data : jenkins-docker-certs : portainer_data : agent-home : If you change something in the Dockerfile(s) for the jenkins ssh agent or for the jenkins-blueocean, remember to re-build that image: 1 docker-compose up -d --build --no-cache To run the docker-compose stack: 1 docker-compose -f docker-compose.yml up -d In order to run this we should check that we ve added: ssh private key added to Jenkins Credentials You can get it on jenkins-blueocean container /var/jenkins_home/.ssh/id_rsa please be careful and do not share it in plain emails/messages :) Above credentials to be used on both the ACSF Daily Agent and on the Freestyle Project","title":"Dockerize all the things"},{"location":"docker_containers.html#where-is-this-coming-from","text":"On the QA server we ve cloned the image repo (which is providing the docker-compose, Dockerfiles, and entrypoints) on Bitnami home: 1 /home/bitnami/jenkins_mbn/jenkins-dind-php","title":"Where is this coming from?"},{"location":"internal_docs.html","text":"To implement on QA server Build the jenkins-blueocean image and spin it up in order to get the SSh key pair is generated: 1 docker-compose -f docker-compose.yml up --force-recreate --build -d jenkins-blueocean Add the jenkins (@blueocean) SSH pub key to host .env file (so it s gets picked by the SSH agent agent) 1 echo JENKINS_SLAVE_SSH_PUBKEY= $( docker exec -it jenkins-blueocean cat /var/jenkins_home/.ssh/id_rsa.pub ) .env Finally, run all services: 1 docker-compose -f docker-compose.yml up --force-recreate -d If you run docker ps now, you should see all our containers running (hopefully!) Get the default Jenkins password from the jenkins-blueocean container (and copy it): 1 docker exec -it jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword Go to jenkins https://jenkins.mobomo.net/ and use the above copied pass to login Configure Jenkins Add all the required plugins (for MBN we are using): GitHub Authentication Docker SSH Agent Useful commands For the agent For Jenkins Backup volume/jenkins_home 1 docker run --volumes-from jenkins-blueocean -v $( pwd ) :/backup debian tar -zcvf /backup/ $( date +%Y-%m-%d ) _jenkins-blueocean.tar.gz --exclude = workspace /var/jenkins_home generates tar.gz file on the host, excluding the workspace dir. Restore 1 docker run --volumes-from jenkins-blueocean -v $( pwd ) :/backup debian tar -zxvf /backup/jenkins-blueocean.tar.gz","title":"Deploy to QA server"},{"location":"internal_docs.html#to-implement-on-qa-server","text":"Build the jenkins-blueocean image and spin it up in order to get the SSh key pair is generated: 1 docker-compose -f docker-compose.yml up --force-recreate --build -d jenkins-blueocean Add the jenkins (@blueocean) SSH pub key to host .env file (so it s gets picked by the SSH agent agent) 1 echo JENKINS_SLAVE_SSH_PUBKEY= $( docker exec -it jenkins-blueocean cat /var/jenkins_home/.ssh/id_rsa.pub ) .env Finally, run all services: 1 docker-compose -f docker-compose.yml up --force-recreate -d If you run docker ps now, you should see all our containers running (hopefully!) Get the default Jenkins password from the jenkins-blueocean container (and copy it): 1 docker exec -it jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword Go to jenkins https://jenkins.mobomo.net/ and use the above copied pass to login Configure Jenkins Add all the required plugins (for MBN we are using): GitHub Authentication Docker SSH Agent","title":"To implement on QA server"},{"location":"internal_docs.html#useful-commands","text":"","title":"Useful commands"},{"location":"internal_docs.html#for-the-agent","text":"","title":"For the agent"},{"location":"internal_docs.html#for-jenkins","text":"","title":"For Jenkins"},{"location":"internal_docs.html#backup-volumejenkins_home","text":"1 docker run --volumes-from jenkins-blueocean -v $( pwd ) :/backup debian tar -zcvf /backup/ $( date +%Y-%m-%d ) _jenkins-blueocean.tar.gz --exclude = workspace /var/jenkins_home generates tar.gz file on the host, excluding the workspace dir.","title":"Backup volume/jenkins_home"},{"location":"internal_docs.html#restore","text":"1 docker run --volumes-from jenkins-blueocean -v $( pwd ) :/backup debian tar -zxvf /backup/jenkins-blueocean.tar.gz","title":"Restore"},{"location":"qa_server.html","text":"","title":"Server Data"},{"location":"workflow.html","text":"ACSF MBN Workflow As illustrated in the following graph, this is general workflow idea: develop branch is created from production Ticket 1 branch is created from production . Ticket 1 branch is merged into develop from a PR. Jenkins creates a tag from develop branch and deploys it to DEV environment. QA team can test on DEV Ticket 2 branch is created from production . Ticket 2 branch is merged into develop from a PR. Jenkins creates a tag from develop branch and deploys it to DEV environment. QA team can test on DEV Release branch is created from production . Some manually selected tickets branches are merged into release branch. Release tag is created from release branch. Release tag is deployed to TEST environment. QA team test on TEST. Release tag is deployed to LIVE environment. QA team test on LIVE. NOTE: Releases are the branches that get deployed further into staging/test environments. Not all releases are pushed to production .","title":"Workflow"},{"location":"workflow.html#acsf-mbn-workflow","text":"As illustrated in the following graph, this is general workflow idea: develop branch is created from production Ticket 1 branch is created from production . Ticket 1 branch is merged into develop from a PR. Jenkins creates a tag from develop branch and deploys it to DEV environment. QA team can test on DEV Ticket 2 branch is created from production . Ticket 2 branch is merged into develop from a PR. Jenkins creates a tag from develop branch and deploys it to DEV environment. QA team can test on DEV Release branch is created from production . Some manually selected tickets branches are merged into release branch. Release tag is created from release branch. Release tag is deployed to TEST environment. QA team test on TEST. Release tag is deployed to LIVE environment. QA team test on LIVE. NOTE: Releases are the branches that get deployed further into staging/test environments. Not all releases are pushed to production .","title":"ACSF MBN Workflow"}]}